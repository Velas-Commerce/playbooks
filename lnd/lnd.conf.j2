[Application Options]
# Allow push payments
accept-keysend=1

# Public network name
alias={{ alias }} 

# Allow gift routes
allow-circular-route=1

# Public hex color
color={{ color }}

# Reduce the cooperative close chain fee
coop-close-target-confs=1000

# Log levels
debuglevel=CNCT=debug,CRTR=debug,HSWC=debug,NTFN=debug,RPCS=debug

# Specify the interfaces to listen on for REST connections ipv4 interface on port 8080
restlisten=0.0.0.0:8080

# Public P2P IP (remove this if using Tor)
externalip={{ externalip }}

# Mark unpayable, unpaid invoices as deleted
gc-canceled-invoices-on-startup=1
gc-canceled-invoices-on-the-fly=1

# Avoid historical graph data sync
# this need to be commented out if you want it to work with LDK
ignore-historical-gossip-filters=1

# Set the maximum amount of commit fees in a channel
max-channel-fee-allocation=1.0

# Set the max timeout blocks of a payment
max-cltv-expiry=5000

# Allow commitment fee to rise on anchor channels
max-commit-fee-rate-anchors=100

# Pending channel limit
maxpendingchannels=10

# Min inbound channel limit
minchansize=500000

# gRPC socket binding
rpclisten=0.0.0.0:10009

# Avoid slow startup time
sync-freelist=1

# Avoid high startup overhead
stagger-initial-reconnect=1

# Delete and recreate RPC TLS certificate when details change or cert expires
tlsautorefresh=1

# Do not include IPs in the RPC TLS certificate
tlsdisableautofill=1

# Add DNS to the RPC TLS certificate
#tlsextradomain=YOUR_DOMAIN_NAME

# The full path to a file (or pipe/device) that contains the password for unlocking the wallet
wallet-unlock-password-file=/home/ubuntu/.lnd/wallet_password

wallet-unlock-allow-create=true

[rpcmiddleware]
# Enable the RPC middleware interceptor functionality.
rpcmiddleware.enable=true

[Bitcoin]
# Turn on Bitcoin mode
bitcoin.active=1

# Set the channel confs to wait for channels
bitcoin.defaultchanconfs=2

# Forward fee rate in parts per million
bitcoin.feerate=1000

# Set bitcoin.testnet=1 or bitcoin.mainnet=1 as appropriate
{% if network == "testnet" %}
bitcoin.testnet=1
{% else %}  
bitcoin.mainnet=1
{% endif %}

# Set the lower bound for HTLCs
bitcoin.minhtlc=1

# Set backing node, bitcoin.node=neutrino or bitcoin.node=bitcoind
bitcoin.node=bitcoind

[bitcoind]
# Configuration for using Bitcoin Core backend

# Set the password to what the auth script said
bitcoind.rpcpass={{ rpcpass }}

# Set the username
bitcoind.rpcuser={{ rpcuser }}

# Set the ZMQ listeners
bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332
bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333

[bolt]
# Enable database compaction when restarting
db.bolt.auto-compact=true

[protocol]
# Enable large channels support
protocol.wumbo-channels=1

[routerrpc]
# Set default chance of a hop success
# routerrpc.apriorihopprob=0.5
routerrpc.apriori.hopprob=0.5

# Start to ignore nodes if they return many failures (set to 1 to turn off)
routerrpc.apriori.weight=0.75

# Set minimum desired savings of trying a cheaper path
routerrpc.attemptcost=10
routerrpc.attemptcostppm=10

# Set the number of historical routing records
routerrpc.maxmchistory=10000

# Set the min confidence in a path worth trying
#routerrpc.minrtprob=0.005

# Set the time to forget past routing failures
# routerrpc.penaltyhalflife=0h10m0s
routerrpc.apriori.penaltyhalflife=0h10m0s

[routing]
# Remove channels from graph that have one side that hasn't made announcements
#routing.strictgraphpruning=1

[tor]
# Enable Tor if using
#tor.active=1
#tor.v3=1



